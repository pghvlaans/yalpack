yalpack-0.1.5 Customization Guide

By default, the compilation DESTDIR directory for yalpack is under
/tmp, and the data, library information and package tarball directories
can be found under /var/yalpack.

Although probably suitable for most needs, these locations can be
customized by editing the yalpack-provided scripts. In order to avoid
mismatching directories across scripts, this document is intended as a
guide to which variables should be changed in case customization is
desired.

As a general note, such edits should be made before installing or
upgrading yalpack. For post-installation changes to the location of
/var/yalpack, move the yalpack directory before using the edited
scripts. /usr/share/yalpack/restore-yalpack could also be used in this
way, though the procedure is untested.

***********************************************************************
                             Changing DESTDIR                         
***********************************************************************

In order to make packages using DESTDIR other than /tmp, the following
script variables should be changed:

  * src/sbin/pkgmake: 		TMP=/tmp

  * src/sbin/pkginst: 		TMP=/tmp

  * src/doc/sysvinit.dewit:	TMP=/tmp 

And, in the source directory:

  * Makefile: 	TMP ?= /tmp

For Makefile, TMP can also be set when calling make.

***********************************************************************
                     Changing the yalpack directory
***********************************************************************

Storing the core yalpack data in a non-root owned location is not
recommended. Additionally, everything under /var/yalpack should stay
under the same directory structure.

In order to store yalpack-related data and package tarballs under a
directory other than /var/yalpack, change the following variable in all
scripts in src/bin, src/sbin and src/share:

  HEAD=/var/yalpack

libcheck and libprecise are special cases, in that they rely on "cut"
instructions to display results. If, against recommendations, the
internal structure of the yalpack directory is changed, the following
lines might have to be edited:

  * libcheck: lines 81 and 82
  * libprecise: lines 71 and 72

Specifically, the "2" in $((*NUM + 2)) refers to the number of
trailing backslashes following $PKGDEPS and $BINDEPS. Provided that the
internal structure of $BINDEPS and $PKGDEPS has not been changed, no
further editing will be necessary.

***********************************************************************
                      Changing backup locations
***********************************************************************

They say everything is a file on Linux systems. This is both good and
bad: unfortunately, files can be lost. Fortunately, files can be
restored! By default, yalpack stores parallel copies of the package
trees in /var/yalpack/pkgdata/TREES in the following locations:

  * /var/log/yalpack
  * /root/.yalpack

To ensure that good backups are present at all times, it is important
that all references to these locations match:

  * src/sbin/pkginst
  * src/sbin/pkgup
  * src/sbin/pkgremove
  * src/install.sh
  * src/share/restore-yalpack.sh

The variables themselves are:

  VARBKUP=/var/log/yalpack
  ROOTHOME=/root
  ROOTBKUP=$ROOTHOME/.yalpack

If either of these locations is changed after installation, install.sh
should be edited and run again to generate the new backups.

src/share/restore-yalpack.new (installed to
/usr/share/yalpack/restore-yalpack.new by default) takes a collection
of package tree files and uses them to regenerate the rest of the
contents of /var/yalpack. To use a non-default backup directory,
replace

  VARBKUP=/var/log/yalpack

in the script before running. If the default HEAD directory above is
changed after installation, restore-yalpack could be used to generate
a directory structure in the new location once all appropriate script
edits have been made. Please note that this procedure is untested.
