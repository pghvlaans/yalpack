#!/bin/sh
#
# /usr/share/yalpack/restore-yalpack
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Running this script will use one of the two yalpack backup locations to
# restore a missing (or partially-missing) directory tree at /var/yalpack.
# The default PKGTREES directory can also be used.

unset HEAD
unset VARBKUP
unset ROOTHOME
unset TMP
unset SBINDIR

CHOME=/etc/yalpack.conf
HEAD="$(grep -m 1 HEAD\= "$CHOME" | cut -d'=' -f2-)"
VARBKUP="$(grep -m 1 VARBKUP\= "$CHOME" | cut -d'=' -f2-)"
ROOTHOME="$(grep -m 1 ROOTHOME\= "$CHOME" | cut -d'=' -f2-)"
TMP="$(grep -m 1 TMP\= "$CHOME" | cut -d'=' -f2-)"
SBINDIR="$(grep -m 1 SBINDIR\= "$CHOME" | cut -d'=' -f2-)"

if [ ! -f "$CHOME" ]; then
        echo
        echo Warning! $(tput smul)"$CHOME"$(tput rmul) was not found!
        echo The document can be found in its default state at
        echo $(tput smul)/usr/share/doc/yalpack-0.1.8/yalpack.conf.backup.$(tput rmul)
        echo
        echo Exiting now
        echo
        exit 1
fi

COUNT1=0
for v in "$HEAD" "$VARBKUP" "$ROOTHOME" "$TMP" "$SBINDIR"; do
        COUNT1=$((COUNT1 + 1))
        COUNT2=0
        [ -z "$v" ] && echo && echo '   'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '   'an absolute file path. Exiting now. && echo && exit 1
        [ -n "$(echo "$v" | grep ' ')" ] && echo && echo '      'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '      'an absolute file path. Exiting now. && echo && exit 1
        [ "$(echo "$v" | cut -c1)" != "/" ] && echo && echo '   'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '      'an absolute file path. Exiting now. && echo && exit 1
        for y in "$HEAD" "$VARBKUP" "$ROOTHOME" "$TMP" "$SBINDIR"; do
                COUNT2=$((COUNT2 + 1))
                if [ "$v" = "$y" ] && [ "$COUNT1" != "$COUNT2" ]; then
                        echo '  '$(tput smul)Warning!$(tput rmul) Two of the current variables have the same value.
                        echo '  'Exiting now. Please edit $(tput smul)"$CHOME"$(tput rmul).
                        echo
                        exit 1
                fi
        done
done

PKGDATA="$HEAD"/pkgdata
STAGING="$HEAD"/packages
PKGTREES="$PKGDATA"/TREES
OLDTREES="$PKGDATA"/TREES-OLD
PKGVERS="$PKGDATA"/VER
SYMTREES="$PKGDATA"/SYMTREES
SYMDESTS="$PKGDATA"/.SYMDESTS
BINDEPS="$HEAD"/BIN-DEPS
NEWFILES="$PKGDATA"/NEWFILES

# Backups

ROOTBKUP="$ROOTHOME"/.yalpack-backup

echo
# Beginning to restore the directory structure
mkdir -p "$STAGING" "$PKGDATA" "$PKGVERS"
# Bringing in a new copy of /var/yalpack/pkgdata/TREES
# The first-priority location is VARBACKUP
unset VAROK
unset ROOTOK
unset TREESOK
unset TREESOURCE
[ -d "$VARBKUP" ] && [ -n "$(find "$VARBKUP"/* -type f 2> /dev/null)" ] && VAROK=yes
[ -d "$ROOTBKUP" ] && [ -n "$(find "$ROOTBKUP"/* -type f 2> /dev/null)" ] && ROOTOK=yes
[ -d "$PKGTREES" ] && [ -n "$(find "$PKGTREES"/* -type f 2> /dev/null)" ] && TREESOK=yes

# Selecting a TREES backup source.
if [ "$VAROK" = yes ]; then
	TREESOURCE="$VARBKUP"
elif [ "$ROOTOK" = yes ]; then
	TREESOURCE="$ROOTBKUP"
elif [ "$TREESOK" = yes ]; then 
	echo
	echo '	'Unfortunately, neither of the listed backup locations has a collection of
	echo '	'package trees. However, $(tput smul)"$PKGTREES"$(tput rmul) appears to be at least partially populated.
	echo
	echo '	'To continue restoring based on the information in $(tput smul)"$PKGTREES"$(tput rmul), enter $(tput smul)y$(tput rmul).
	echo '	'To stop this script, enter any other character.
	unset INPUT
	read -r INPUT
	if [ "$INPUT" != "y" ]; then 
		echo
		echo '	'Exiting now. If a yalpack backup directory is at another location, change
		echo '	'the $(tput smul)"VARBKUP"$(tput rmul) variable in $(tput smul)/usr/share/yalpack/restore-yalpack$(tput rmul).
		echo
		exit
	fi
	TREESOURCE="$PKGTREES"
# Can't do anything without a collection of package trees.
else
	echo
	echo '	'Unfortunately, neither the backup locations nor the original location of
	echo '	'$(tput smul)"$PKGTREES"$(tput rmul) has a collection of files.
	echo
	echo '	'The script will now exit. If a yalpack backup directory is at a location
	echo '	'other than $(tput smul)"$VARBKUP"$(tput rmul) or $(tput smul)"$ROOTBKUP"$(tput rmul), change the $(tput smul)"VARBKUP"$(tput rmul)
	echo '	'variable in $(tput smul)/usr/share/yalpack/restore-yalpack$(tput rmul).
	echo
	exit
fi

if [ "$TREESOURCE" != "$PKGTREES" ]; then
	# Confirming the backup.
	echo '	'A collection of package trees was found at $(tput smul)"$TREESOURCE"$(tput rmul). To proceed with restoring
	echo '	'the $(tput smul)"$HEAD"$(tput rmul) directory structure using this collection, enter $(tput smul)y$(tput rmul). $(tput smul)"$TREESOURCE"$(tput rmul) will
	echo '	'be copied in.
	echo
	echo '	'To stop the script, enter any other character. To choose a different directory as
	echo '	'the basis for restoration, change the $(tput smul)"VARBKUP"$(tput rmul) variable in
	echo '	'$(tput smul)/usr/share/yalpack/restore-yalpack$(tput rmul).
	echo
	unset INPUT
	read -r INPUT
	if [ "$INPUT" != "y" ]; then
		echo
		echo '	'Exiting now.
		echo
		exit
	fi
	[ -d "$PKGTREES" ] && echo '	'Moving the current $(tput smul)"$PKGTREES"$(tput rmul) directory to $(tput smul)"$OLDTREES"$(tput rmul). && rm -rf "$OLDTREES"  && mv "$PKGTREES" "$OLDTREES" && echo
	cp -rv "$TREESOURCE" "$PKGTREES"
	# Directories inside PKGTREES can cause problems; fixing now.
	[ -n "$(find "$PKGTREES"/* -type d)" ] && echo && echo '	'A directory has been found inside $(tput smul)"$PKGTREES"$(tput rmul). Please ensure that only && echo '	'files exist inside "$PKGTREES" and run the script again.
	echo
fi

# Restoring other package information with pkgcheck
echo '	'Now using $(tput smul)pkgcheck$(tput rmul) to restore ancillary package information. This may take
echo '	'some time.
echo
# Passing the variables.
find "$PKGTREES"/* -type f | while read -r pkg; do
package="$(basename "$pkg")"
echo '		'"$package"
YALCONFIG=yes \
HEAD="$HEAD" \
VARBKUP="$VARBKUP" \
ROOTHOME="$ROOTHOME" \
TMP="$TMP" \
SBINDIR="$SBINDIR" "$SBINDIR"/pkgcheck "$package" > /dev/null 2>&1
done

echo
echo '	'Thank you for your patience. Done with checking packages.
echo

# Restoring library information with liblist -n
echo '	'Now using $(tput smul)liblist$(tput rmul) to restore library information.
echo
YALCONFIG=yes \
HEAD="$HEAD" \
VARBKUP="$VARBKUP" \
ROOTHOME="$ROOTHOME" \
TMP="$TMP" \
SBINDIR="$SBINDIR" "$SBINDIR"/liblist -n > /dev/null 2>&1
echo '	'Done running $(tput smul)liblist$(tput rmul). $(tput smul)"$BINDEPS"$(tput rmul) has been restored.
echo

# Restoring SYMTREES, if any
echo '	'Now restoring or replacing the $(tput smul)SYMTREES$(tput rmul) directory.
echo
rm -rf "$SYMTREES" "$SYMDESTS"
mkdir -p "$SYMTREES" "$SYMDESTS"
# Needed to avoid potential pkgremove errors
touch "$SYMTREES"/PLACEHOLDER
touch "$SYMDESTS"/PLACEHOLDER
find "$PKGTREES"/* -type f | while read -r f; do
	rm -f "$PKGDATA"/SYMTEMP
	rm -f "$PKGDATA"/SYMTEMP2
        tree="$(basename "$f")"
        # Checking for files installed under symlinked paths and documenting the
	# non-symlinked file path.
        while read -r line; do
		# Checking for symlinks to directories in the package tree.
		[ -d "$line" ] && [ -h "$line" ] && echo "$line" >> "$PKGDATA"/SYMTEMP
	done < "$f"
	
	# This grep will reveal those directories and all files/symlinks
	# installed under them.
	[ -f "$PKGDATA"/SYMTEMP ] && while read -r dir; do
		grep ^"$dir" "$f" >> "$PKGDATA"/SYMTEMP2
	done < "$PKGDATA"/SYMTEMP
	
	# If the destinations are not in PKGTREE, list in SYMTREES.
	[ -f "$PKGDATA"/SYMTEMP2 ] && while read -r sym; do
		unset link
		unset linkold
		unset linkOK
		unset linkoldOK

		symold="${sym%.new}"

		link="$(readlink -e "$sym")" || true
		linkold="$(readlink -e "$symold")" || true

		[ -n "$(echo "$link")" ] && linkOK=yes
		[ -n "$(echo "$linkold")" ] && linkoldOK=yes

		unset writeOK
		unset writeoldOK

		[ "$linkOK" = yes ] && [ -z "$(grep -m 1 -x "$link" "$f")" ] && writeOK=yes
		[ "$linkoldOK" = yes ] && [ -z "$(grep -m 1 -x "$linkold" "$f")" ] && writeoldOK=yes

		if [ "$writeOK" = yes ] && [ "$writeoldOK" = yes ]; then
	    		echo "$symold" to "$linkold" >> "$SYMTREES"/"$tree" && SYMTREEFLAG="WRITE"
  			echo "$linkold" >> "$SYMDESTS"/"$tree"
		elif [ "$writeoldOK" = yes ] && [ -z "$link" ]; then
  			echo "$symold" to "$linkold" >> "$SYMTREES"/"$tree" && SYMTREEFLAG="WRITE"
      			echo "$linkold" >> "$SYMDESTS"/"$tree"
		elif [ "$writeOK" = yes ] && [ -z "$linkold" ]; then
         		echo "$sym" to "$link" >> "$SYMTREES"/"$tree" && SYMTREEFLAG="WRITE"
			echo "$link" >> "$SYMDESTS"/"$tree"
		fi
	done < "$PKGDATA"/SYMTEMP2	
done
# In case, by some coincidence, the last package examined contained files under
# a symlinked path.
rm -f "$PKGDATA"/SYMTEMP
rm -f "$PKGDATA"/SYMTEMP2
echo '	'The $(tput smul)"$SYMTREES"$(tput rmul) directory has been repopulated.
echo

# Restoring version information using the TREE documents
echo '	'Now restoring the $(tput smul)"$PKGVERS"$(tput rmul) directory.
echo
find "$PKGTREES"/* -type f | while read -r f; do
	unset NAMESTR
	unset NAME
	unset VER
	NAME="$(basename "$f")"
	NAMESTR="$(head -1 "$f")"
	VER="${NAMESTR##$NAME}"
	[ -n "$VER" ] && VER="${VER#-}"
	echo "$VER" > "$PKGVERS"/"$NAME"
done
echo '	'Done.
echo

# Restoring the lists in NEWFILES.
echo '	'Now restoring or replacing the $(tput smul).new$(tput rmul) file lists for each installed
echo '	'package.
echo
mkdir -p "$NEWFILES"
find "$PKGTREES"/* -type f | while read -r f; do
	g="$(basename "$f")"
	unset VER
	VER="$(cat "$PKGVERS"/"$g")"
	rm -f "$NEWFILES"/"$g"
	while read -r file; do
		h="${file%.new}"
		# Only existing .new files are written in.
		if [ "$file" != "$h" ] && [ -f "$file" ]; then
			if [ ! -f "$NEWFILES"/"$g" ]; then
				[ -n "$VER" ] && echo "$g"-"$VER" >> "$NEWFILES"/"$g"
				[ -z "$VER" ] && echo "$g" >> "$NEWFILES"/"$g"
			fi
			echo "$file" >> "$NEWFILES"/"$g"
		fi		
	done < "$f"
done
echo '	'$(tput smul)"$NEWFILES"$(tput rmul) has been regenerated.
echo
echo '	'$(tput smul)Restoration complete.$(tput rmul) Please note that package tarballs are not
echo '	'recoverable. However, it should now be possible to resume
echo '	'normal operations with yalpack.
echo
