#!/bin/sh
#
# pkgcheck: to update information about installed packages on LFS systems
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Checking for a package's installed binaries/executables (and hence, libraries)

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
	echo
	echo pkgcheck: Check for details about a yalpack package.
	echo
	echo Syntax: pkgcheck NAME
	echo
	echo Flag:
	echo "  -h | --help : Display this help menu."
	echo
	exit
fi

HEAD=/var/yalpack
STAGING=$HEAD/packages
PKGDATA=$HEAD/pkgdata
PKGTREES=$PKGDATA/TREES
PKGTREE=$PKGTREES/"$1"
BINDEPS=$HEAD/BIN-DEPS

echo
echo Preparing to check for information about "$1".
echo
set -e
cd $STAGING
unset NAME

# Sanity check
[ ! -f "$PKGTREE" ] && echo Warning! Package not found. Exiting now. && exit
NAME=$(basename "$PKGTREE")

PKGBIN=$PKGDATA/PKG-BINS/"$NAME"
PKGDEP=$PKGDATA/PKG-DEPS/"$NAME"
PKGLIB=$PKGDATA/PKG-LIBS/"$NAME"

mkdir -p "$BINDEPS"
mkdir -p "$PKGBIN"
mkdir -p "$PKGDEP"
mkdir -p "$PKGLIB"

# Backing up any previous list of binaries
[ -f "$PKGBIN/instbins" ] && mv "$PKGBIN"/instbins "$PKGBIN"/.instbins.old
[ -f "$PKGDEP/libdeps" ] && mv "$PKGDEP"/libdeps "$PKGDEP"/.libdeps.old
[ -f "$PKGLIB/libs" ] && mv "$PKGLIB"/libs "$PKGLIB"/.libs.old
echo Backed up data lists.
echo
# Looking for executables
while read -r f; do
	if [ -x "$f" ] && [ -f "$f" ]; then
		g="$(basename "$f")"
		# Not interested in libraries here
		if [ -z "$(echo "$f" | grep -e "[.]so" -e "[.]la" -e "[.]a")" ]; then
			echo Found "$f".
			echo "$f" >> "$PKGBIN"/instbins
			echo Wrote "$f" to package data.
			# liblist will return an error for files that are not dynamic binaries; the script should proceed regardless
			set +e
			liblist "$f" > /dev/null 2>&1
			set -e
			[ -f "$BINDEPS/$g/$g.libinfo" ] && cat "$BINDEPS/$g/$g.libinfo" >> "$PKGDEP"/libdeps
			echo Used libraries written in, if any.
			echo
		fi
	fi
done < "$PKGTREE"
# Also interested in symlinks to programs
while read -r f; do
	if [ -h "$f" ]; then
		h="$(readlink "$f")"
		if [ -z "$(echo "$h" | grep -e "[.]so" -e "[.]la" -e "[.]a")" ] && [ -x "$h" ] && [ -f "$h" ]; then
			echo Found "$f".
			echo "$f" >> "$PKGBIN"/instbins
			echo Wrote "$f" to package data.
			# liblist will return an error for files that are not dynamic binaries; the script should proceed regardless
			set +e
			liblist "$f" > /dev/null 2>&1
			set -e
			[ -f "$BINDEPS/$g/$g.libinfo" ] && cat "$BINDEPS/$g/$g.libinfo" >> "$PKGDEP"/libdeps
			echo Used libraries written in, if any.
			echo
		fi
	fi
done < "$PKGTREE"

# Adding information about anything installed to libraries.
for z in /lib /lib64 /usr/lib /usr/libexec /usr/include
do
y="$(echo "$z" | wc -c)"
y=$((y - 1))
while read -r f
do
	if [ -f "$f" ] || [ -h "$f" ]; then
		if [ "$(echo "$f" | cut -c1-"$y")" = "$z" ]; then
			g="$(basename "$f")"
			# Restrict to actual libraries
			if [ -n "$(echo "$f" | grep -e "[.]so[.]" -e "[.]la[.]" -e "[.]a[.]" -e "[.]so\$" -e "[.]la\$" -e "[.]a\$")" ]; then
				# Not interested in doubles (can happen in /usr/libexec)
				[ ! -f "$PKGLIB/libs" ] && touch "$PKGLIB/libs"
				[ -z "$(grep "$f" "$PKGLIB/libs")" ] && echo Found library "$f". && echo "$f" >> "$PKGLIB/libs" && echo
			fi
		fi
	fi
done < "$PKGTREE"
done

if [ -f "$PKGBIN"/instbins ]; then
	echo These programs were installed by "$1":
	cat "$PKGBIN"/instbins
	echo
fi
if [ -f "$PKGDEP"/libdeps ]; then
	echo The following libraries are used by "$1":
	cat "$PKGDEP"/libdeps
	echo
fi
if [ -f "$PKGLIB"/libs ]; then
	echo Installed library information for "$1":
	cat "$PKGLIB"/libs
	echo
	# Called with CHECK=no from pkginst and pkgup; step is skipped otherwise.
	if [ "${CHECK:-yes}" != yes ]; then
		echo Libraries appear to have been installed. Now using liblist -n to update all
		echo library information. Please wait.
		set +e
		liblist -n > /dev/null 2>&1
		set -e
		echo Library information update done.
		echo
	fi
fi

if [ "${CHECK:-yes}" != yes ]; then
	if [ "$NAME" = "yalpack" ] ; then
		echo This is an installation or upgrade of yalpack. Running liblist -n now to make a
		echo collection of library information.
		/sbin/liblist -n > /dev/null 2>&1
		echo Library information for yalpack updated.
		echo
	fi	
fi

echo Check complete.
echo
