#!/bin/sh
#
# pkgcheck: to update information about installed packages on LFS systems
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Checking for a package's installed binaries/executables (and hence, libraries)

if [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
	echo
	echo $(tput smul)pkgcheck$(tput rmul): Check for details about a yalpack package.
	echo
	echo Syntax: pkgcheck NAME
	echo
	echo Flag:
	echo "  -h | --help : Display this help menu."
	echo
	exit
fi

HEAD=/var/yalpack
STAGING=$HEAD/packages
PKGDATA=$HEAD/pkgdata
PKGTREES=$PKGDATA/TREES
PKGTREE=$PKGTREES/"$1"
BINDEPS=$HEAD/BIN-DEPS
SBINDIR=/usr/sbin

[ "${CHECK:-yes}" = yes ] && echo
echo '	'Preparing to check for information about $(tput smul)"$1"$(tput rmul).
echo
set -e
cd $STAGING
unset NAME

# Sanity check
[ ! -f "$PKGTREE" ] && echo '	'$(tput smul)Warning!$(tput rmul) Package not found. Exiting now. && exit
NAME=$(basename "$PKGTREE")

PKGBIN=$PKGDATA/PKG-BINS/"$NAME"
PKGDEP=$PKGDATA/PKG-DEPS/"$NAME"
PKGLIB=$PKGDATA/PKG-LIBS/"$NAME"

mkdir -p "$BINDEPS"
mkdir -p "$PKGBIN"
mkdir -p "$PKGDEP"
mkdir -p "$PKGLIB"

# Backing up any previous list of binaries
[ -f "$PKGBIN/instbins" ] && mv "$PKGBIN"/instbins "$PKGBIN"/.instbins.old
[ -f "$PKGDEP/libdeps" ] && mv "$PKGDEP"/libdeps "$PKGDEP"/.libdeps.old
[ -f "$PKGLIB/libs" ] && mv "$PKGLIB"/libs "$PKGLIB"/.libs.old
echo '	'Backed up data lists.
echo
# Looking for executables, divided between libraries and others (symlinks also)
while read -r f; do
	h="${f%.new}"
	file="$f"
	unset NEWFILE
	[ "$h" != "$file" ] && NEWFILE=yes
	[ "$NEWFILE" = yes ] && [ -f "$h" ] && [ ! -f "$f" ] && file="$h"
	if [ -x "$file" ] && [ -f "$file" ]; then
		g="$(basename "$file")"
		i="$(readlink -e "$file")"
		# Non-libraries
		if [ -z "$(echo "$g" | grep -e "[.]so[.]" -e "[.]so\$" -e "[.]la[.]" -e "[.]la\$" -e "[.]a[.]" -e "[.]a\$")" ]; then
			# [ -x $i ] is sufficient here, because symlinks to directories fail type -f
			if [ "$i" = "$file" ] || [ -x "$i" ] || [ ! -h "$file" ]; then
				echo "$file" >> "$PKGBIN"/instbins
				# liblist will return an error for files that are not dynamic binaries; the script should proceed regardless
				set +e
				"$SBINDIR"/liblist "$file" > /dev/null 2>&1
				set -e
				[ -f "$BINDEPS/$g/$g.libinfo" ] && cat "$BINDEPS/$g/$g.libinfo" >> "$PKGDEP"/libdeps
			fi
		# Libraries
		else
			echo "$f" >> "$PKGLIB/libs"
		fi
	# The library method above is cheating; some libraries are non-executable. Completing
	# here.
	elif [ ! -x "$file" ] && [ -f "$file" ] && [ -n "$(echo "$file" | grep -e "[.]so[.]" -e "[.]so\$" -e "[.]la[.]" -e "[.]la\$" -e "[.]a[.]" -e "[.]a\$")" ]; then
		echo "$file" >> "$PKGLIB/libs"
	fi	
done < "$PKGTREE"

if [ -f "$PKGBIN"/instbins ]; then
	echo '	'These programs were installed by $(tput smul)"$1"$(tput rmul):
	echo
	cat "$PKGBIN"/instbins
	echo
fi
if [ -f "$PKGLIB"/libs ]; then
	echo '	'These libraries were installed by $(tput smul)$"$1"$(tput rmul):
	echo
	cat "$PKGLIB"/libs
	echo
	# Called with CHECK=no from pkginst and pkgup; step is skipped otherwise.
	if [ "${CHECK:-yes}" != yes ]; then
		echo '	'Now using $(tput smul)liblist -n$(tput rmul) to update all library information...
		set +e
		"$SBINDIR"/liblist -n > /dev/null 2>&1
		set -e
		echo '	'Done.
		echo
	fi
fi

if [ "${CHECK:-yes}" != yes ]; then
	if [ "$NAME" = "yalpack" ] ; then
		echo '	'This is an installation or upgrade of $(tput smul)yalpack$(tput rmul). Running $(tput smul)liblist -n$(tput rmul) now to make a
		echo '	'collection of library information...
		"$SBINDIR"/liblist -n > /dev/null 2>&1
		echo '	'Done.
		echo
	fi	
fi

echo '	'$(tput smul)Check complete.$(tput rmul)
echo
