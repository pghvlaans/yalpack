#!/bin/sh
#
# pkgremove: to remove packages (made by pkgmake and installed by pkginst) from
# LFS systems
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Used to remove packages. HANDLE WITH CARE.

# If called by another script, use the passed-in variables to save time.
if [ "${YALCONFIG:-no}" = no ]; then
unset HEAD
unset VARBKUP
unset ROOTHOME
unset TMP
unset SBINDIR

CHOME=/etc/yalpack.conf
HEAD="$(grep -m 1 HEAD\= "$CHOME" | cut -d'=' -f2-)"
VARBKUP="$(grep -m 1 VARBKUP\= "$CHOME" | cut -d'=' -f2-)"
ROOTHOME="$(grep -m 1 ROOTHOME\= "$CHOME" | cut -d'=' -f2-)"
TMP="$(grep -m 1 TMP\= "$CHOME" | cut -d'=' -f2-)"
SBINDIR="$(grep -m 1 SBINDIR\= "$CHOME" | cut -d'=' -f2-)"

if [ ! -f "$CHOME" ]; then
        echo
        echo Warning! $(tput smul)"$CHOME"$(tput rmul) was not found!
        echo The document can be found in its originally-installed state at
        echo $(tput smul)/usr/share/doc/yalpack-0.1.8/yalpack.conf.backup.$(tput rmul)
        echo
        echo Exiting now
        echo
        exit 1
fi

COUNT1=0
for v in "$HEAD" "$VARBKUP" "$ROOTHOME" "$TMP" "$SBINDIR"; do
        COUNT1=$((COUNT1 + 1))
        COUNT2=0
        [ -z "$v" ] && echo && echo '   'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '   'an absolute file path. Exiting now. && echo && exit 1
        [ -n "$(echo "$v" | grep ' ')" ] && echo && echo '      'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '      'an absolute file path. Exiting now. && echo && exit 1
        [ "$(echo "$v" | cut -c1)" != "/" ] && echo && echo '   'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '      'an absolute file path. Exiting now. && echo && exit 1
        for y in "$HEAD" "$VARBKUP" "$ROOTHOME" "$TMP" "$SBINDIR"; do
                COUNT2=$((COUNT2 + 1))
                if [ "$v" = "$y" ] && [ "$COUNT1" != "$COUNT2" ]; then
                        echo '  '$(tput smul)Warning!$(tput rmul) Two of the current variables have the same value.
                        echo '  'Exiting now. Please edit $(tput smul)"$CHOME"$(tput rmul).
                        echo
                        exit 1
                fi
        done
done
fi

main (){
STAGING="$HEAD"/packages
PKGDATA="$HEAD"/pkgdata
PKGTREES="$PKGDATA"/TREES
OLDTREE="$PKGTREES"/"$1"
[ "${UPGRADE:-no}" = yes ] && OLDTREE="$PKGTREES/YALPACK-OUTGOING"
SYMTREES="$PKGDATA"/SYMTREES
OLDSYM="$SYMTREES"/"$1"
[ "${UPGRADE:-no}" = yes ] && OLDSYM="$SYMTREES/YALPACK-OUTGOING"
SYMDESTS="$PKGDATA"/.SYMDESTS
OLDSYMDEST="$SYMDESTS"/"$1"
[ "${UPGRADE:-no}" = yes ] && OLDSYMDEST="$SYMDESTS/YALPACK-OUTGOING"
BINS="$PKGDATA"/PKG-BINS
DEPS="$PKGDATA"/PKG-DEPS
LIBS="$PKGDATA"/PKG-LIBS
VERS="$PKGDATA"/VER
OLDVER="$VERS"/"$1"
[ "${UPGRADE:-no}" = yes ] && OLDVER="$VERS/YALPACK-OUTGOING"
NEWFILES="$PKGDATA"/NEWFILES
OLDNEWFILE="$NEWFILES"/"$1"
[ "${UPGRADE:-no}" = yes ] && OLDNEWFILE="$NEWFILES/YALPACK-OUTGOING"
RMDOC="$PKGDATA"/RMDOC
CODMR="$PKGDATA"/CODMR
RMTEMP="$PKGDATA"/RMTEMP
SAFE="$PKGDATA"/SAFE

# Backups

VARTREE="$VARBKUP"/"$1"
[ "${UPGRADE:-no}" = yes ] && VARTREE="$VARBKUP/YALPACK-OUTGOING"
VARTEMP="$VARBKUP"/RMTEMP
# Putting yalpack data directories in locations not owned by root is not
# recommended.
ROOTBKUP="$ROOTHOME"/.yalpack-backup
ROOTTREE="$ROOTBKUP"/"$1"
[ "${UPGRADE:-no}" = yes ] && ROOTTREE="$ROOTBKUP/YALPACK-OUTGOING"
ROOTTEMP="$ROOTBKUP"/RMTEMP

if [ "$2" != "NOCONFIRM" ] && [ "${UPGRADE:-no}" != yes ]; then
	echo
	echo '	'It may be a good idea to run pkgcheck on the package first.
	echo
	echo '	'Removal of the package $(tput smul)"$1"$(tput rmul) has been requested. To proceed\, 
	echo '	'enter $(tput smul)\"y\"$(tput rmul). If in doubt, terminate the process now.
	read -r INPUT
	echo
	[ "$INPUT" != "y" ] && exit
elif [ "$2" = "NOCONFIRM" ] && [ "${UPGRADE:-no}" != yes ]; then
	echo
fi

set -e
# Using pkgremove on a system with few packages could conceivably cause the
# deletion of important symlinks on merged-usr systems. For LFS 11.0 onward,
# these include the merged-usr symlinks. Creating the SAFE file will prevent
# this edge case from causing potentially serious problems. (rmdir is used for
# handling directories, so this precaution is not needed for non-symlinks)
cat > "$SAFE" << "EOF"
/bin
/sbin
/lib
/etc/mtab
EOF

rm -rf "$RMTEMP" "$VARTEMP" "$ROOTTEMP"
mkdir -p "$RMTEMP"/VER
mkdir -p "$RMTEMP"/NAME
mkdir -p "$RMTEMP"/NEWFILE
[ -d "$VARBKUP" ] && mkdir "$VARTEMP"
[ -d "$ROOTBKUP" ] && mkdir "$ROOTTEMP"

NAME="$1"
if [ -f "$OLDVER" ]; then
	VER="$(cat "$OLDVER")"
	mv "$OLDVER" "$RMTEMP"/VER
fi

[ -f "$OLDNEWFILE" ] && mv "$OLDNEWFILE" "$RMTEMP"/NEWFILE

# No exit code necessary because pkgup already checks for this.
[ -z "$(find "$OLDTREE")" ] && echo '	'Requested package not found. Check for the package name with $(tput smul)pkglist$(tput rmul). Exiting now. && exit

# Removing any previous RMDOC and CODMR
rm -f "$RMDOC" "$CODMR"
# Producing RMDOC; it will exclude the package title and the home directory.
while read -r line;
do
	[ -n "$VER" ] && [ "$line" != "$NAME"-"$VER" ] && [ "$(echo "$line" | cut -c1-5)" != "/home" ] && echo "$line" >> "$RMDOC"
	[ -z "$VER" ] && [ "$line" != "$NAME" ] && [ "$(echo "$line" | cut -c1-5)" != "/home" ] && echo "$line" >> "$RMDOC"
done < "$OLDTREE"
mv "$OLDTREE" "$RMTEMP"/TREE
# The backup location(s) only have TREE files.
[ -f "$VARTREE" ] && mv "$VARTREE" "$VARTEMP"/TREE
[ -f "$ROOTTREE" ] && mv "$ROOTTREE" "$ROOTTEMP"/TREE

# Moving the SYMTREE document, if any.
if [ -f "$OLDSYMDEST" ]; then
mv "$OLDSYM" "$RMTEMP"/SYMTREE
mv "$OLDSYMDEST" "$RMTEMP"/SYMDEST
fi

# Making CODMR, a line-reversed version of RMDOC. Needed for the proper handling
# of empty directories.
tac "$RMDOC" > "$CODMR"

# This is not done in case of upgrades, as these files will already belong to
# the new version of the package.
if [ "${UPGRADE:-no}" != yes ]; then
	mkdir -p "$RMTEMP"/BIN "$RMTEMP"/DEP "$RMTEMP"/LIB
	mv ${BINS:?}/"$NAME" "$RMTEMP"/BIN/
	mv ${DEPS:?}/"$NAME" "$RMTEMP"/DEP/
	mv ${LIBS:?}/"$NAME" "$RMTEMP"/LIB/
	echo '	'Binary and library information moved to "$RMTEMP".
	echo
fi

unset ECHOHERE
# Checking package for matches in other installed packages. Should be safe on a 
# package-oriented system. For files.
while read -r line;
do
	if [ -f "$line" ] && [ ! -h "$line" ]; then
		# If grep -x turns up nothing, not needed by remaining packages.
		unset LINK
		# Using "or true" to avoid errors when examining an already-
		# deleted file
		LINK="$(readlink -e "$line")" || true
		if [ -z "$(grep -m 1 -x -e "$line" -e "${line%.new}" "$PKGTREES"/* "$SYMDESTS"/*)" ] && \
		[ -z "$(grep -m 1 -x -e "$LINK" -e "$LINK.new" -e "${LINK%.new}" "$PKGTREES"/* "$SYMDESTS"/*)" ]; then
			rm -fv "$line" && ECHOHERE=yes
		fi
	fi
done < "$RMDOC"

# For symlinks
while read -r line;
do
	if [ -h "$line" ]; then
		# Don't want to knock out symlinks to things that are still
		# needed. Important examples for LFS 11.0 and after: /sbin,
		# /bin
		unset LINK
		LINK="$(readlink -e "$line")" || true
		# If grep -x turns up nothing, not needed by remaining packages.
		# SAFE preserves merged-usr symlinks against low-package edge
		# cases.
		if [ -z "$(grep -m 1 -x "$line" "$PKGTREES"/* "$SYMDESTS"/* "$SAFE")" ] && \
		[ -z "$(grep -m 1 -x "$LINK" "$PKGTREES"/* "$SYMDESTS"/*)" ]; then
			rm -fv "$line" && ECHOHERE=yes
		fi
	fi
done < "$RMDOC"

# Directories go afterwards to catch the empty ones properly.
while read -r line;
do
	if [ -d "$line" ] && [ ! -h "$line" ]; then
		unset LINK
		LINK="$(readlink -e "$line")" || true
		# Directories are protected by rmdir, etc.
		if [ -z "$(grep -m 1 -x "$line" "$PKGTREES"/* "$SYMDESTS"/*)" ] && \
		[ -z "$(grep -m 1 -x "$LINK" "$PKGTREES"/* "$SYMDESTS"/*)" ]; then
			# For directories (ls -A condition is to cut down on
			# unnecessary and alarming messages)
			unset x	
			x=$(ls -A "$line") && [ -z "$x" ] && ECHOHERE=yes && rmdir -v --ignore-fail-on-non-empty "$line"
		fi
	fi
# The reversed document is used here to catch directories containing only empty
# directories.
done < "$CODMR"
[ "$ECHOHERE" = yes ] && echo

# In case of library changes
ldconfig
echo '	'Done running $(tput smul)ldconfig$(tput rmul).
echo
# Cleaning up
rm -f "$RMDOC" "$CODMR"
rm -rf "$RMTEMP" "$VARTEMP" "$ROOTTEMP"
rm -f "$SAFE"
[ -n "$VER" ] && rm -f "$STAGING"/"$NAME"-"$VER".tar.xz
[ -z "$VER" ] && rm -f "$STAGING"/"$NAME".tar.xz

if [ "${UPGRADE:-no}" != yes ]; then
	echo '	'The package $(tput smul)"$1"$(tput rmul) has been removed. 
	[ "$NAME" != "yalpack" ] && echo '	'Consider running $(tput smul)\"liblist -n\"$(tput rmul) to update dynamic library information.
	echo
else
	[ -n "$VER" ] && echo '	'Any extraneous files from $(tput smul)"$NAME"-"$VER"$(tput rmul) have been removed.
	[ -z "$VER" ] && echo '	'Any extraneous files from $(tput smul)"$NAME"$(tput rmul) have been removed.
	echo
fi
}
unset NOCONFIRM
unset OUTGOING
for arg in "$@"; do
	case "$arg" in
		-h|--help)
		echo
		echo $(tput smul)pkgremove$(tput rmul): Remove a yalpack package from the system.
		echo
		echo Syntax: pkgremove \(options\) NAME1 NAME2 ...
		echo
		echo Flags:
		echo "  -y | --yes : Disable manual confirmation stage"
		echo "  -h | --help : Display this help menu"
		echo
		exit
		;;
		-y|--yes)
		NOCONFIRM=NOCONFIRM
		;;
		*)
		OUTGOING="$arg"
		main "$OUTGOING" "$NOCONFIRM"
	esac
done
