#!/bin/sh
#
# pkgremove: to remove packages (made by pkgmake and installed by pkginst) from LFS systems
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Used to remove packages. HANDLE WITH CARE.

main() {
STAGING=/var/yalpack/packages
DATA=/var/yalpack/pkgdata
PKGTREES=$DATA/TREES
OLDTREE=$PKGTREES/"$1"
BINS=$DATA/PKG-BINS
DEPS=$DATA/PKG-DEPS
LIBS=$DATA/PKG-LIBS
VERS=$DATA/VER
RMDOC=$DATA/RMDOC
RMTEMP=$DATA/RMTEMP

if [ "$2" != "NOCONFIRM" ]; then
	echo
	echo It is advised to run pkgcheck on the package first.
	echo
	echo Removal of package "$1" has been requested. To proceed\, 
	echo press \"y\". IF YOU HAVE ANY DOUBTS, TERMINATE THE PROCESS NOW.
	read -r INPUT
	echo
	[ "$INPUT" != "y" ] && exit
fi

set -e
rm -rf "$RMTEMP"
mkdir -p "$RMTEMP"
NAME="$1"
VER="$(cat $VERS/"$1")"
[ -z "$(find "$OLDTREE")" ] && echo Requested package not found. Check for the package name with pkglist. Exiting now. && exit

# Removing any previous RMDOC
rm -f $RMDOC
# Producing RMDOC; it will exclude the package title and the home directory.
while read -r line;
do
	[ -n "$VER" ] && [ "$line" != "$NAME"-"$VER" ] && [ "$(echo "$line" | cut -c1-5)" != "/home" ] && echo "$line" >> $RMDOC
	[ -z "$VER" ] && [ "$line" != "$NAME" ] && [ "$(echo "$line" | cut -c1-5)" != "/home" ] && echo "$line" >> $RMDOC
done < "$OLDTREE"

# Obviously, don't want to check the package to be removed.
mkdir -p "$RMTEMP"/TREE "$RMTEMP"/VER "$RMTEMP"/BIN "$RMTEMP"/DEP "$RMTEMP"/LIB
mv "$OLDTREE" "$RMTEMP"/TREE/
mv  $VERS/"$NAME" "$RMTEMP"/VER/
echo TREE and VER moved to "$RMTEMP".
# Other housekeeping
mv  ${BINS:?}/"$NAME" "$RMTEMP"/BIN/
mv ${DEPS:?}/"$NAME" "$RMTEMP"/DEP/
mv ${LIBS:?}/"$NAME" "$RMTEMP"/LIB/
echo Other data files moved to "$RMTEMP".
echo

# Checking package for matches in other installed packages. Should be safe on a package-oriented system.
while read -r line;
do
	# If grep -x turns up nothing, not needed by remaining packages
	if [ -z "$(grep -x "$line" "$PKGTREES"/*)" ]; then
		# For files
		[ -f "$line" ] && rm -fv "$line"
		# For symlinks
		[ -h "$line" ] && rm -fv "$line"
	fi
done < "$RMDOC"

# Directories go afterwards to catch the empty ones properly.
while read -r line;
do
	# If grep -x turns up nothing, not needed by remaining packages
	if [ -z "$(grep -x "$line" "$PKGTREES"/*)" ]; then
		# For directories
		[ -d "$line" ] && x=$(ls -A "$line") && [ -z "$x" ] && rmdir -v --ignore-fail-on-non-empty "$line"
	fi
done < "$RMDOC"


# In case of library changes
echo
echo Running ldconfig now...
/sbin/ldconfig || true
echo Done running ldconfig.
echo
# Cleaning up
rm -f "$RMDOC"
rm -rf "$RMTEMP"
[ -n "$VER" ] && rm -fv $STAGING/"$NAME"-"$VER".tar.xz
[ -z "$VER" ] && rm -fv $STAGING/"$NAME".tar.xz

if [ "${UPGRADE:-no}" != yes ]; then
	echo The package "$1" has been removed. 
	[ "$NAME" != "yalpack" ] && echo Consider running \"liblist -n\" to update yalpack\'s dynamic library information.
	echo
else
	[ -n "$VER" ] && echo Extraneous files from "$NAME"-"$VER" have been removed. Proceeding with the upgrade process.
	[ -z "$VER" ] && echo Extraneous files from "$NAME" have been removed. Proceeding with the upgrade process.
	echo
fi
}
unset NOCONFIRM
unset OUTGOING
for arg in "$@"; do
	case "$arg" in
		-h|--help)
		echo
		echo pkgremove: Remove a yalpack package from the system
		echo
		echo Syntax: pkgremove \(options\) NAME1 NAME2 ...
		echo
		echo Flags:
		echo "  -y | --yes : Disable manual confirmation stage"
		echo "  -h | --help : Display this help menu"
		echo
		exit
		;;
		-y|--yes)
		NOCONFIRM=NOCONFIRM
		;;
		*)
		OUTGOING="$arg"
		main "$OUTGOING" "$NOCONFIRM"
	esac
done
