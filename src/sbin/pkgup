#!/bin/sh
#
# pkgup: used to upgrade packages (made by pkgmake and installed by pkginst) on LFS systems
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Used to upgrade packages to a new version. HANDLE WITH CARE.

HEAD=/var/yalpack
STAGING=$HEAD/packages
PKGDATA=$HEAD/pkgdata
PKGTREES=$PKGDATA/TREES
PKGVERS=$PKGDATA/VER
SYMTREES=$PKGDATA/SYMTREES
SYMDESTS=$PKGDATA/.SYMDESTS
NEWFILES=$PKGDATA/NEWFILES

# Backups
VARBKUP=/var/log/yalpack
# Putting yalpack data directories in locations not owned by root is not recommended.
ROOTHOME=/root
ROOTBKUP=$ROOTHOME/.yalpack-backup

main() {
NEWDIR=$STAGING/"$2"

if [ "$4" != "NOCONFIRM" ]; then
	echo
	echo '	'It may be a good idea to run pkgcheck on the old package first.
	echo
	echo '	'An upgrade of $(tput smul)"$1"$(tput rmul) to $(tput smul)"$2"$(tput rmul) has been requested. To proceed,
	echo '	'enter $(tput smul)\"y\"$(tput rmul). If in doubt, terminate the process now.
	read -r INPUT
	[ "$INPUT" != "y" ] && exit
else
	echo '	'Upgrade of $(tput smul)"$1"$(tput rmul) to $(tput smul)"$2"$(tput rmul) is underway.
fi
echo

# If init is upgraded, or in case of a glibc upgrade, it will need to reload before a halt or reboot
# is attempted.
INITVER="$(/sbin/init --version | cut -d' ' -f4-)"

set -e
cd $STAGING
[ ! -d "$NEWDIR" ] && tar -xf $STAGING/"$2".tar.xz
# Sanity checks
[ ! -f "$NEWDIR/TREE" ] && echo '	'$(tput smul)Warning!$(tput rmul) The $(tput smul)TREE$(tput rmul) file for $(tput smul)"$2"$(tput rmul) could not be found. Try running pkgmake again. Exiting now. && exit
[ ! -f "$NEWDIR/NAME" ] && echo '	'$(tput smul)Warning!$(tput rmul) The $(tput smul)NAME$(tput rmul) file for $(tput smul)"$2"$(tput rmul) could not be found. Try running pkgmake again. Exiting now. && exit
NAME="$(cat "$NEWDIR/NAME")"

# The new version will overwrite the outgoing TREE and VER, but they need to be saved for comparison.
cp "$PKGTREES"/"$1" "$PKGTREES/YALPACK-OUTGOING"
# The backup locations contain only TREE files.
[ -d "$VARBKUP" ] && cp "$VARBKUP"/"$1" "$VARBKUP/YALPACK-OUTGOING"
[ -d "$ROOTBKUP" ] && cp "$ROOTBKUP"/"$1" "$ROOTBKUP/YALPACK-OUTGOING"
cp "$PKGVERS"/"$1" "$PKGVERS/YALPACK-OUTGOING"

# The new version may or may not overwrite SYMTREE and NEWFILE
[ -f "$SYMTREES"/"$1" ] && mv "$SYMTREES"/"$1" "$SYMTREES/YALPACK-OUTGOING"
[ -f "$SYMDESTS"/"$1" ] && mv "$SYMDESTS"/"$1" "$SYMDESTS/YALPACK-OUTGOING"
# Just in case.
mkdir -p "$NEWFILES"
[ -f "$NEWFILES"/"$1" ] && cp "$NEWFILES"/"$1" "$NEWFILES/YALPACK-OUTGOING"

# pkgremove, pkginst and pkgcheck can use their own error handling
set +e
[ "$3" = "KEEP" ] && [ "$5" = "CHOWN" ] && UPGRADE=yes pkginst -kr "$2"
[ "$3" = "KEEP" ] && [ "$5" != "CHOWN" ] && UPGRADE=yes pkginst -k "$2"
[ "$3" != "KEEP" ] && [ "$5" = "CHOWN" ] && UPGRADE=yes pkginst -r "$2"
[ "$3" != "KEEP" ] && [ "$5" != "CHOWN" ] && UPGRADE=yes pkginst "$2"
# UPGRADE=yes protects the newly-installed version from interference.
UPGRADE=yes pkgremove -y "$1"
CHECK=no pkgcheck "$NAME"
set -e

# Checking for a new version of init
NEWINITVER="$(/sbin/init --version | cut -d' ' -f4-)"

# Reload init if new glibc or new sysvinit
unset MESSAGE
# Adding "or true" means the script will not crash when performing glibc or init upgrades
[ -n "$(grep /lib/libc.so.6 "$PKGTREES"/"$NAME")" ] || [ "$INITVER" != "$NEWINITVER" ] && MESSAGE="WRITE" && telinit U || true
[ "$MESSAGE" = "WRITE" ] && echo && echo '	'$(tput smul)init$(tput rmul) has been reloaded, if not in chroot. && echo

echo '	'The upgrade of $(tput smul)"$1"$(tput rmul) to $(tput smul)"$2"$(tput rmul) is complete.
echo
}
unset OUTGOING
unset INCOMING
unset KEEP
unset NOCONFIRM
unset CHOWN
for arg in "$@"; do
	case "$arg" in
		-h|--help)
		echo
		echo $(tput smul)pkgup$(tput rmul): Upgrade from one yalpack package to another.
		echo
		echo Syntax: pkgup \(options\) OLDNAME NEWNAME-NEWVER
		echo
		echo Flags:
		echo "  -k | --keep : Retain the package tarball of the incoming package in /var/yalpack/packages."
		echo "  -y | --yes : Disable manual confirmation."
		echo "  -r | --root-own : Change ownership of the incoming package contents to root:root. Useful"
		echo "  if an unprivileged user built and still owns the contents."
		echo "  -h | --help : Display this help menu."
		echo
		exit
		;;
		-k|--keep)
		KEEP=KEEP
		;;
		-y|--yes)
		NOCONFIRM=NOCONFIRM
		;;
		-r|--root-own)
		CHOWN=CHROOT
		;;
		-kr|-rk)
		KEEP=KEEP
		CHOWN=CHOWN
		;;
		-ry|-yr)
		CHOWN=CHOWN
		NOCONFIRM=NOCONFIRM
		;;
		-ky|-yk)
		KEEP=KEEP
		NOCONFIRM=NOCONFIRM
		;;
		-ryk|-rky|-kyr|-kry|-yrk|-ykr)
		KEEP=KEEP
		NOCONFIRM=NOCONFIRM
		CHOWN=CHOWN
		;;
		*)
		[ -n "$OUTGOING" ] && [ -n "$INCOMING" ] && echo &&  echo Too many arguments\; only one package can be upgraded at a time. && echo && exit 
		[ -f $PKGTREES/"$arg" ] && OUTGOING="$arg"
		[ ! -f $PKGTREES/"$arg" ] && INCOMING="$arg"
	esac
done
[ -z "$OUTGOING" ] && echo Outgoing package not found! Use pkglist -n to search for the correct package name. Exiting now. && exit
[ -z "$INCOMING" ] && echo Incoming package not specified! Exiting now. && exit
main "$OUTGOING" "$INCOMING" "$KEEP" "$NOCONFIRM" "$CHOWN"
