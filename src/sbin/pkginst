#!/bin/sh
#
# pkginst: installing a package on LFS systems
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Installing a package from a source tarball

main (){
HEAD=/var/yalpack
TMP=/tmp
STAGING=$HEAD/packages
PKGDIR=$STAGING/"$PACK"
PKGDATA=$HEAD/pkgdata
BUILDDEST=$TMP/"$PACK"/dest
PKGDEST=$PKGDIR/dest
PKGTREES=$PKGDATA/TREES
SYMTREES=$PKGDATA/SYMTREES
SYMDESTS=$PKGDATA/.SYMDESTS
PKGVER=$PKGDATA/VER
NEWFILES=$PKGDATA/NEWFILES

# Backups

VARBKUP=/var/log/yalpack
# Placing yalpack data directories in locations not owned by root is not recommended.
ROOTHOME=/root
ROOTBKUP="$ROOTHOME"/.yalpack-backup

echo
echo '	'Installing package $(tput smul)"$PACK"$(tput rmul).
echo
set -e
mkdir -p $STAGING
mkdir -p "$PKGDATA" "$PKGTREES" "$PKGVER" "$NEWFILES"
cd $STAGING
tar -xf "$PACK".tar.xz
NAME=$(cat "$PKGDIR"/NAME)

# Exit code not necessary because pkgup already checks for TREE.
[ ! -d "$PKGDEST" ] && echo '	'$(tput smul)Warning! "$PKGDEST"$(tput rmul) was not found. Exiting. && exit

cd "$PKGDEST"
# Patrick Volkerding says non-755 root is dangerous, so it can't hurt (for safety when extracting the package to root).
chmod 755 "$PKGDEST"
# If --root-own was passed in, change ownership to root:root. Ownership is preserved at the actual install stage.
[ "$3" = "CHOWN" ] && chown -R root:root "$PKGDEST"

# Non-directories, non-symlinks and non-binaries in etc and home will be .new; check for identical/unique. Doing nothing means .new installed. (Any other file named .new manually will be checked similarly.)
echo "$PACK", installed' '$(date) > "$NEWFILES"/"$NAME"

find "$PKGDEST"/ -type f | while read -r f;	
do
	h="${f##$PKGDEST/}"
	i="${h%.new}"
	# Proceed if the file is .new
	if [ "$i" != "$h" ]; then
		# The non-.new version will be called this, if needed
		j="${f%.new}"
		# If file exists, check for differences
		if [ -f "/$i" ]; then
			md5f=$(md5sum "$f" | cut -d' ' -f-1)
			md5i=$(md5sum "/$i" | cut -d' ' -f-1)
			# If not different, new file is not needed
			if [ "$md5f" = "$md5i" ]; then
				rm -f "$f"
			else
				# If .new file will be installed, log it and show the user afterwards.
				echo "/$h" >> "$NEWFILES"/"$NAME"
				# Change the .new file ownership and mode to match the existing file (mostly relevant for rc files)
				chown "$(stat -c "%U:%G" "/$i")" "$f"
				chmod "$(stat -c "%a" "/$i")" "$f"
			fi
		# If file DNE, don't call the new one .new
		else
			mv "$f" "$j"
		fi
	fi
done
echo '	'Done evaluating the $(tput smul).new$(tput rmul) files, if any.
echo

# Don't retain empty NEWFILE documents.
unset NEWLENGTH
NEWLENGTH="$(wc -l "$NEWFILES"/"$NAME" | cut -d' ' -f1)"
[ "$NEWLENGTH" = "1" ] && rm -f "$NEWFILES"/"$NAME"

# Preparing and reporting on symlinks; absolute symlinks can have been pointed at either the ultimate
# destination or a file/directory in the build directory. Symlinks that required repair will be reported.
while read -r f;
do
	if [ -h "$PKGDEST"/"$f" ]; then
	i="${f#/}"
	j=$(readlink "$i")
	# If the symlink is absolute; BUILDDEST needed to test it out.
	if [ -n "$(echo "$j" | grep "$BUILDDEST")" ]; then
		# Pointing at BUILDDEST from time of building.
		k="${j##$BUILDDEST}"
		echo /"$i" "to" "$k" >> "$PKGDIR"/SYMLINKS
		ln -sfn "$k" "$i"
		echo
	fi
	fi
done < "$PKGDIR"/TREE

[ -f "$PKGDIR/SYMLINKS" ] && echo '	'Symlink checks and repairs complete. && echo

# Now that changes have been made to dest, make a new tarball for extraction...
echo '	'$(tput smul)Repackaging$(tput rmul)...
tar -czf "$STAGING"/INPACKAGE.tar.xz ./*
# And extract over root. (dereferencing for links; don't change directory mode or ownership)
cd /
echo '	'$(tput smul)Extracting now$(tput rmul)...
tar --dereference --hard-dereference -xf "$STAGING"/INPACKAGE.tar.xz --no-overwrite-dir
cd "$PKGDIR"
echo '	'Done.
echo

# Running ldconfig in case of new libraries; in case of an upgrade, it should be run after removal.
if [ "${UPGRADE:-no}" != yes ]; then
	ldconfig
	echo '	'Done running $(tput smul)ldconfig$(tput rmul).
	echo
fi

# Populate the TREE entry for future updating
cat "$PKGDIR"/TREE > $PKGTREES/"$NAME"
# Saving to the backup locations as well, if they exist. The install script for
# yalpack will make and populate them otherwise.
[ -d "$VARBKUP" ] && cat "$PKGDIR"/TREE > "$VARBKUP"/"$NAME"
[ -d "$ROOTBKUP" ] && cat "$PKGDIR"/TREE > "$ROOTBKUP"/"$NAME"

# Add version information to /var/yalpack/pkgdata
cat "$PKGDIR"/VER > "$PKGVER"/"$NAME"

# Make the SYMTREES document, if needed. If the directory does not yet exist,
# the install script for yalpack will make and populate it.
unset SYMTREEFLAG
if [ -d "$SYMTREES" ]; then
	echo '	'Checking for installations under paths with symlinks and symlinks with
	echo '	'destinations not provided by $(tput smul)"$PACK"$(tput rmul)...
	while read -r line; do
		if [ -f "$line" ] || [ -h "$line" ] || [ -d "$line" ]; then
			unset LINK
			# "or true" prevents pkginst from crashing if the package contains a broken symlink
			LINK="$(readlink -e "$line")" || true
			# Trying to avoid doubles with the original TREE document
			if [ -n "$LINK" ] && \
			[ "$LINK" != "$line" ] && \
			[ -z "$(grep -x "$LINK" "$PKGTREES"/"$NAME")" ] && \
			[ -z "$(grep -x "$LINK".new "$PKGTREES"/"$NAME")" ]; then
				SYMTREEFLAG="WRITE"
				echo "$line" to "$LINK" >> "$SYMTREES"/"$NAME"
				echo "$LINK" >> "$SYMDESTS"/"$NAME"
			fi
		fi
	done < "$PKGTREES"/"$NAME"
	if [ "$SYMTREEFLAG" = "WRITE" ]; then
		echo
		cat "$SYMTREES"/"$NAME"
		echo
	fi
	echo '	'Done.
	echo
fi

# Run the install script, if any
if [ -f "$PKGDIR/install.sh" ]; then 
	echo '	'Now running $(tput smul)install.sh$(tput rmul).
	echo
	"$PKGDIR"/install.sh
	echo
fi

# For the installer's edification and to update library use info
# pkgup handles pkgcheck for upgrades.
[ "${UPGRADE:-no}" != yes ] && CHECK=no pkgcheck "$NAME"

# Inform about any repaired symlinks
if [ -f "$PKGDIR"/SYMLINKS ]; then 
	echo '	'The following $(tput smul)absolute symlinks$(tput rmul) were repaired before installation:
	echo
	cat "$PKGDIR"/SYMLINKS
	echo
fi

# Inform about any .new files
if [ -f "$NEWFILES/$NAME" ]; then
	echo '	'The following $(tput smul).new$(tput rmul) files should be examined:
	echo
	cat "$NEWFILES"/"$NAME"
	echo
	echo '	'The list will be stored at $(tput smul)"$NEWFILES"/"$NAME"$(tput rmul) for reference.
	echo '	'Run $(tput smul)/usr/share/yalpack/newfiles$(tput rmul) to update "$NEWFILES".
	echo
fi

if [ "$SYMTREEFLAG" = "WRITE" ]; then
	echo '	'$(tput smul)One or more installations under a symlink path have been detected.$(tput rmul)
	# This may happen from time to time with merged-usr. Without merged-usr, it probably shouldn't.
	if [ ! -h "/bin" ]; then
		echo '	'This may be a sign tht the package was built incorrectly. See 
		echo '	'$(tput smul)"$SYMTREES"/"$NAME"$(tput rmul) for a list.
	else
		echo '	'See $(tput smul)"$SYMTREES"/"$NAME"$(tput rmul) for a list.
	fi
	echo
fi

# Clean up afterwards (INPACKAGE is never retained)
cd "$STAGING"
rm -f "$STAGING"/INPACKAGE.tar.xz
rm -rf "${PKGDIR:?}"
if [ "$2" != "KEEP" ]; then
	rm -f $STAGING/"$PACK".tar.xz
	echo '	'The package tarball has been removed. See $(tput smul)$PKGTREES/"$NAME"$(tput rmul)
	echo '	'for a list of installed files, symlinks and directories.
	echo
fi

echo '	'Installation of $(tput smul)"$PACK"$(tput rmul) complete.
echo
}
unset KEEP
unset PACK
unset CHANGE
unset CHOWN
for arg in "$@"; do
	case "$arg" in
		-h|--help)
		echo
		echo $(tput smul)pkginst$(tput rmul): Install a yalpack package from a package tarball in /var/yalpack/packages
		echo
		echo Syntax: pkginst \(options\) NAME1-VER1 NAME2-VER2 ...
		echo 
		echo The package version should not be included if the NAME file contains the entire name-
		echo version string.
		echo
		echo Flags:
		echo "  -k | --keep : Retain the package tarball in /var/yalpack/packages after installation"
		echo "  -r | --root-own : Change the ownership of the contents of the package to" 
		echo "  root:root before installation. Useful for packages that were built and are owned by"
		echo "  a non-privileged user."
		echo "  -h | --help : Display this help menu"
		echo
		exit
		;;
		-k|--keep)
		KEEP=KEEP
		;;
		-r|--root-own)
		CHOWN=CHOWN
		;;
		-kr|-rk)
		KEEP=KEEP
		CHOWN=CHOWN
		;;
		*)
		PACK="$arg"
		main "$PACK" "$KEEP" "$CHOWN"
	esac
done
