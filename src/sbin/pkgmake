#!/bin/sh
#
# pkgmake: making a package from compiled source for LFS systems
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Making a package from source elements

main() {
HEAD=/var/yalpack
TMP=/tmp
STAGING=$HEAD/packages
BUILDDIR=$TMP/$1
BUILDDEST="$BUILDDIR"/dest
NAME="$(cat "$BUILDDIR"/NAME)"

echo
echo '	'Making a package for $(tput bold)"$1"$(tput sgr0).
echo
set -e
cd "$BUILDDEST"

# Move all files in etc and home (if any) to .new; exclude symlinks and directories
for z in etc home
do
if [ -d "$BUILDDEST/$z" ]; then
	# Copy the original directory out for safekeeping
	rm -rf $TMP/"$1"-$z
	cp -r "$BUILDDEST"/$z $TMP/"$1"-$z
	# List non-binary files
	rm -f "$TMP"/"$1"-"$z"-list
	echo "$(find "$(pwd)"/$z/ -type f -exec file {} \; | grep text | cut -d':' -f1)" >> "$TMP"/"$1"-"$z"-list
	# Now the renaming can proceed
	while read -r f; do
		# Existence check needed, as etc or home without files will otherwise crash.
		[ -f "$f" ] && [ ! -h "$f" ] &&mv "$f" "$f".new
	done < "$TMP"/"$1"-"$z"-list
fi
done

# Making the package tree document
echo "$1" > "$BUILDDIR"/TREE

find "$BUILDDEST"/ | while read -r file;
do
	i="${file##$BUILDDEST/}"
	echo /"$i" >> "$BUILDDIR"/TREE
done

# Adding version information
VER="${1##$NAME-}"
# Properly handling no-version packages (like the kernel, if the user wants more than one installed)
if [ "$VER" != "$NAME" ]; then
	echo "$VER" > "$BUILDDIR"/VER
else
	touch "$BUILDDIR"/VER
fi

# Compression and move to the correct place
cd $TMP
tar -czvf "$1".tar.xz "$1"
mkdir -p $STAGING
mv "$1".tar.xz $STAGING

# Check for the existence of an executable install.sh file
if [ -x "$BUILDDIR/install.sh" ]; then
	echo
	echo '	'Executable $(tput bold)install.sh$(tput sgr0) file found.
else
	echo
	echo '	'NOTE: No $(tput bold)install.sh$(tput sgr0) file was found, or it is not executable.
	echo '	'Please confirm before installation.
fi

# Restoring the original files to the compiled source and cleaning up.
for z in etc home
do
if [ -d "$TMP/$1-$z" ]; then
	rm -rf "${BUILDDEST:?}"/$z
	mv $TMP/"$1"-$z "$BUILDDEST"/$z
	rm -f $TMP/"$1"-"$z"-list
fi
done
echo
}
for arg in "$@"; do
	case "$arg" in
		-h|--help)
		echo
		echo $(tput bold)pkgmake$(tput sgr0): Make a yalpack package from software compiled to a directory at /tmp/NAME-VER/dest
		echo
		echo Syntax: pkgmake NAME1-VER1 NAME2-VER2 ...
		echo
		echo Before making the package, ensure a file called $(tput bold)\"NAME\"$(tput sgr0) with the package name exists 
		echo above dest. If $(tput bold)\"NAME\"$(tput sgr0) contains the entire package-version string, NAME is sufficient
		echo when calling pkgmake.
		echo 
		echo An executable $(tput bold)\"install.sh\"$(tput sgr0) above $(tput bold)dest$(tput sgr0) will be run before the package checks at the
		echo end of the installation process.
		echo
		exit
		;;
		*)
		main "$arg"
	esac
done
