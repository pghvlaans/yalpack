#!/bin/sh
#
# pkgmake: making a package from compiled source for LFS systems
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Making a package from source elements

main() {
unset HEAD
unset VARBKUP
unset ROOTHOME
unset TMP
unset SBINDIR

CHOME=/etc/yalpack.conf
HEAD="$(grep -m 1 HEAD\= "$CHOME" | cut -d'=' -f2-)"
VARBKUP="$(grep -m 1 VARBKUP\= "$CHOME" | cut -d'=' -f2-)"
ROOTHOME="$(grep -m 1 ROOTHOME\= "$CHOME" | cut -d'=' -f2-)"
TMP="$(grep -m 1 TMP\= "$CHOME" | cut -d'=' -f2-)"
SBINDIR="$(grep -m 1 SBINDIR\= "$CHOME" | cut -d'=' -f2-)"

if [ ! -f "$CHOME" ]; then
        echo
        echo Warning! $(tput smul)"$CHOME"$(tput rmul) was not found!
        echo The document can be found in its default state at
        echo $(tput smul)/usr/share/doc/yalpack-0.2.0/yalpack.conf.backup.$(tput rmul)
        echo
        echo Exiting now
        echo
        exit 1
fi

COUNT1=0
for v in "$HEAD" "$VARBKUP" "$ROOTHOME" "$TMP" "$SBINDIR"; do
        COUNT1=$((COUNT1 + 1))
        COUNT2=0
        [ -z "$v" ] && echo && echo '   'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '   'an absolute file path. Exiting now. && echo && exit 1
        [ -n "$(echo "$v" | grep ' ')" ] && echo && echo '      'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '      'an absolute file path. Exiting now. && echo && exit 1
        [ "$(echo "$v" | cut -c1)" != "/" ] && echo && echo '   'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '      'an absolute file path. Exiting now. && echo && exit 1
        for y in "$HEAD" "$VARBKUP" "$ROOTHOME" "$TMP" "$SBINDIR"; do
                COUNT2=$((COUNT2 + 1))
                if [ "$v" = "$y" ] && [ "$COUNT1" != "$COUNT2" ]; then
                        echo '  '$(tput smul)Warning!$(tput rmul) Two of the current variables have the same value.
                        echo '  'Exiting now. Please edit $(tput smul)"$CHOME"$(tput rmul).
                        echo
                        exit 1
                fi
        done
done

STAGING="$HEAD"/packages
BUILDDIR="$TMP"/"$1"
BUILDDEST="$BUILDDIR"/dest
NAME="$(cat "$BUILDDIR"/NAME)"

echo
echo '	'Making a package for $(tput smul)"$1"$(tput rmul).
echo
set -e
cd "$BUILDDEST"

# Changing the permissions of BUILDDEST to 0755 for safety.
chmod 0755 "$BUILDDEST"

# Move all files in etc and home (if any) to .new; exclude symlinks and
# directories
for z in etc home
do
if [ -d "$BUILDDEST/$z" ]; then
	# Copy the original directory out for safekeeping
	rm -rf "$TMP"/"$1"-$z
	cp -r "$BUILDDEST"/$z $TMP/"$1"-$z
	# List text files only
	rm -f "$TMP"/"$1"-"$z"-list
	echo "$(find "$BUILDDEST"/"$z" -type f -exec file {} \; | grep text | cut -d':' -f1)" >> "$TMP"/"$1"-"$z"-list
	# Now the renaming can proceed
	[ -f "$TMP/$1-$z-list" ] && while read -r f; do
		echo "$f"
		# A non-text file with "text" in its name could slip through; 
		# checking again.
		if [ -n "$(file "$f" | cut -d':' -f2- | grep text)" ]; then
			# Existence check needed, as etc or home without files
			# will otherwise crash.
			[ -f "$f" ] && [ ! -h "$f" ] && mv "$f" "$f".new
		fi
	done < "$TMP"/"$1"-"$z"-list
fi
done

# Making the package tree document
echo "$1" > "$BUILDDIR"/TREE

find "$BUILDDEST"/ | while read -r file;
do
	i="${file##$BUILDDEST/}"
	echo /"$i" >> "$BUILDDIR"/TREE
done

# Preparing and reporting on symlinks; absolute symlinks can have been pointed
# at either the ultimate destination or a file/directory in the build directory.
# Symlinks that required repair will be reported.
while read -r f;
do
        if [ -h "$BUILDDEST"/"$g" ]; then
        i="${f#/}"
        j=$(readlink "$i")
        if [ -n "$(echo "$j" | grep -m 1 "$BUILDDEST")" ]; then
                # Pointing at BUILDDEST from time of building.
                k="${j##$BUILDDEST}"
                echo /"$i" "to" "$k" >> "$BUILDDIR"/SYMLINKS
                ln -sfn "$k" "$i"
                echo
        fi
        fi
done < "$BUILDDIR"/TREE

[ -f "$BUILDDIR/SYMLINKS" ] && echo '     'Symlink checks and repairs complete. && echo
# This file is not wanted in the actual package.
rm -f "$BUILDDIR/SYMLINKS"

# Adding version information
VER="${1##$NAME-}"
# Properly handling no-version packages (like the kernel, if the user wants more
# than one installed)
if [ "$VER" != "$NAME" ]; then
	echo "$VER" > "$BUILDDIR"/VER
else
	touch "$BUILDDIR"/VER
fi

# Compression and move to the correct place
cd "$TMP"
tar -cavf "$1".tar.xz "$1"
mkdir -p "$STAGING"
mv "$1".tar.xz "$STAGING"

# Check for the existence of an executable install.sh file
if [ -x "$BUILDDIR/install.sh" ]; then
	echo
	echo '	'Executable $(tput smul)install.sh$(tput rmul) file found.
else
	echo
	echo '	'NOTE: No $(tput smul)install.sh$(tput rmul) file was found, or it is not executable.
	echo '	'Please confirm before installation.
fi

# Restoring the original files to the compiled source and cleaning up.
for z in etc home
do
if [ -d "$TMP/$1-$z" ]; then
	rm -rf "${BUILDDEST:?}"/$z
	mv "$TMP"/"$1"-$z "$BUILDDEST"/$z
	rm -f "$TMP"/"$1"-"$z"-list
fi
done
echo
}
for arg in "$@"; do
	case "$arg" in
		-h|--help)
		echo
		echo $(tput smul)pkgmake$(tput rmul): Make a yalpack package from software compiled to a directory at /tmp/NAME-VER/dest
		echo
		echo Syntax: pkgmake NAME1-VER1 NAME2-VER2 ...
		echo
		echo Before making the package, ensure a file called $(tput smul)\"NAME\"$(tput rmul) with the package name exists 
		echo above dest. If $(tput smul)\"NAME\"$(tput rmul) contains the entire package-version string, NAME is sufficient
		echo when calling pkgmake.
		echo 
		echo An executable $(tput smul)\"install.sh\"$(tput rmul) above $(tput smul)dest$(tput rmul) will be run before the package checks at the
		echo end of the installation process.
		echo
		exit
		;;
		*)
		main "$arg"
	esac
done
