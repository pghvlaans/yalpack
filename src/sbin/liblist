#!/bin/sh
#
# liblist: for library check support on LFS systems
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# Checking dynamic libraries called in by all binaries. Must be run as root or 
# there will be no information about /sbin and /usr/sbin.

# If called by another script, use the passed-in variables to save time.
if [ "${YALCONFIG:-no}" = no ]; then
unset HEAD
unset VARBKUP
unset ROOTHOME
unset TMP
unset SBINDIR

CHOME=/etc/yalpack.conf
HEAD="$(grep -m 1 HEAD\= "$CHOME" | cut -d'=' -f2-)"
VARBKUP="$(grep -m 1 VARBKUP\= "$CHOME" | cut -d'=' -f2-)"
ROOTHOME="$(grep -m 1 ROOTHOME\= "$CHOME" | cut -d'=' -f2-)"
TMP="$(grep -m 1 TMP\= "$CHOME" | cut -d'=' -f2-)"
SBINDIR="$(grep -m 1 SBINDIR\= "$CHOME" | cut -d'=' -f2-)"

if [ ! -f "$CHOME" ]; then
        echo
        echo Warning! $(tput smul)"$CHOME"$(tput rmul) was not found!
        echo The document can be found in its default state at
        echo $(tput smul)/usr/share/doc/yalpack-0.1.8/yalpack.conf.backup.$(tput rmul)
        echo
        echo Exiting now
        echo
        exit 1
fi

COUNT1=0
for v in "$HEAD" "$VARBKUP" "$ROOTHOME" "$TMP" "$SBINDIR"; do
        COUNT1=$((COUNT1 + 1))
        COUNT2=0
        [ -z "$v" ] && echo && echo '   'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '   'an absolute file path. Exiting now. && echo && exit 1
        [ -n "$(echo "$v" | grep ' ')" ] && echo && echo '      'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '      'an absolute file path. Exiting now. && echo && exit 1
        [ "$(echo "$v" | cut -c1)" != "/" ] && echo && echo '   'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '      'an absolute file path. Exiting now. && echo && exit 1
        for y in "$HEAD" "$VARBKUP" "$ROOTHOME" "$TMP" "$SBINDIR"; do
                COUNT2=$((COUNT2 + 1))
                if [ "$v" = "$y" ] && [ "$COUNT1" != "$COUNT2" ]; then
                        echo '  '$(tput smul)Warning!$(tput rmul) Two of the current variables have the same value.
                        echo '  'Exiting now. Please edit $(tput smul)"$CHOME"$(tput rmul).
                        echo
                        exit 1
                fi
        done
done
fi

BINDEPS="$HEAD"/BIN-DEPS
mkdir -p "$BINDEPS"

# The function to check libraries for an individual binary
populate() {
# This line here is why yalpack should not be used with glibc-2.26 and earlier;
# see "man 1 ldd."
x="$(ldd "$1")"
if [ -n "$x" ]; then
	BIN="$(basename "$1")"
	# An empty variable name here would be really bad
	[ -z "$BIN" ] && return
	BINDIR="$BINDEPS/$BIN"
	mkdir -p "$BINDIR" && echo "$BIN" > "$BINDIR"/"$BIN".libinfo && echo "$x" >> "$BINDIR"/"$BIN".libinfo
fi
}

# A new dynamic library usage data collection
new() {
[ -d "$BINDEPS".old ]; rm -rf "$BINDEPS.old"
[ -d "$BINDEPS" ] && mv "$BINDEPS" "$BINDEPS.old"
mkdir -p "$BINDEPS"
for d in /bin /usr /sbin /opt; do
	# Only look in if directory exists, is not a symlink and is non-empty
	if [ -d "$d" ] && [ ! -h "$d" ] && [ -n "$(ls -A "$d")" ]; then
		echo Checking $d
		find "$d"/* -executable -type f | while read -r file; do 
			[ -z "$(basename "$file" | grep -m 1 -e "[.]so[.]" -e "[.]so\$" -e "[.]la\$" -e "[.]a\$")" ] && populate "$file" 
		done
	fi
done
}

if [ -z "$1" ]; then
	new
else
	for arg in "$@"; do
		case "$arg" in
			-h|--help)
			echo
			echo $(tput smul)liblist$(tput rmul): Generate dynamic library information, separated by binary and stored in
			echo /var/yalpack/BINDEPS
			echo
			echo Syntax: liblist \(options\) \(PATH1 PATH2 ... \)
			echo
			echo A PATH input is the full path to a binary. If one or more PATH variables is used,
			echo liblist will add information for these binaries only. Starting with the \-n flag
			echo will generate a fresh collection once, and then update thereafter.
			echo
			echo Flags:
			echo "  -n | --new : Make a new collection at /var/yalpack/bindeps (default behavior)"
			echo "  -h | --help : Display this help menu"
			echo
			exit
			;;
			-n|--new)
			new
			;;
			*)
			[ -n "$arg" ] && populate "$arg"
		esac
	done
fi
