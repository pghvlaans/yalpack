#!/bin/sh
#
# libcheck: a "fuzzy" reverse library usage check for LFS systems; see 
# libprecise for more exact results
#
# Copyright 2021 K. Eugene Carlson  Tsukuba, Japan
# All rights reserved.
#
# Redistribution and use of this script, with or without modification, is
# permitted provided that the following conditions are met:
#
# 1. Redistributions of this script must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
#
#  THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR IMPLIED
#  WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#  MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO
#  EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#  PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
#  OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
#  WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
#  OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF
#  ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# Checking for information about a particular library.

# Acquiring yalpack.conf variables
unset HEAD
unset VARBKUP
unset ROOTHOME
unset TMP
unset SBINDIR

CHOME=/etc/yalpack.conf
HEAD="$(grep -m 1 HEAD\= "$CHOME" | cut -d'=' -f2-)"
VARBKUP="$(grep -m 1 VARBKUP\= "$CHOME" | cut -d'=' -f2-)"
ROOTHOME="$(grep -m 1 ROOTHOME\= "$CHOME" | cut -d'=' -f2-)"
TMP="$(grep -m 1 TMP\= "$CHOME" | cut -d'=' -f2-)"
SBINDIR="$(grep -m 1 SBINDIR\= "$CHOME" | cut -d'=' -f2-)"

if [ ! -f "$CHOME" ]; then
	echo
	echo Warning! $(tput smul)"$CHOME"$(tput rmul) was not found!
	echo The document can be found in its default state at 
	echo $(tput smul)/usr/share/doc/yalpack-0.2.0/yalpack.conf.backup.$(tput rmul)
	echo
	echo Exiting now
	echo
	exit 1
fi

COUNT1=0
for v in "$HEAD" "$VARBKUP" "$ROOTHOME" "$TMP" "$SBINDIR"; do
        COUNT1=$((COUNT1 + 1))
        COUNT2=0
        [ -z "$v" ] && echo && echo '   'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '   'an absolute file path. Exiting now. && echo && exit 1
        [ -n "$(echo "$v" | grep ' ')" ] && echo && echo '      'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '      'an absolute file path. Exiting now. && echo && exit 1
        [ "$(echo "$v" | cut -c1)" != "/" ] && echo && echo '   'One or more variables in $(tput smul)"$CHOME"$(tput rmul) is missing, contains a space, or is not && echo '      'an absolute file path. Exiting now. && echo && exit 1
        for y in "$HEAD" "$VARBKUP" "$ROOTHOME" "$TMP" "$SBINDIR"; do
                COUNT2=$((COUNT2 + 1))
                if [ "$v" = "$y" ] && [ "$COUNT1" != "$COUNT2" ]; then
                        echo '  '$(tput smul)Warning!$(tput rmul) Two of the current variables have the same value.
                        echo '  'Exiting now. Please edit $(tput smul)"$CHOME"$(tput rmul).
                        echo
                        exit 1
                fi
        done
done

PKGDATA="$HEAD"/pkgdata
PKGLIBS="$PKGDATA"/PKG-LIBS
PKGDEPS="$PKGDATA"/PKG-DEPS
BINDEPS="$HEAD"/BIN-DEPS
TEMPDIR=~/.yalpack
TEMP="$TEMPDIR"/temp-for-libs

main (){
mkdir -p "$TEMPDIR"
# On the off chance that ~/.yalpack/temp-for-libs exists for some reason.
[ -f "$TEMP" ] && mv "$TEMP" "$TEMP".yal
mkdir -p "$PKGDATA"

echo
echo '	'Checking for information about $(tput smul)"$1"$(tput rmul).
rm -f "$TEMP" "$TEMP".new
# /lib and /lib64 retained for compatibility with LFS 10.1. Not actionable if
# these are symlinks.
for f in /usr/lib/* /lib/* /lib64/* /usr/libexec/*
do 
	if [ -z "$2" ]; then
		# Shallow search (default; appropriate for most cases)
		[ -d "$(dirname "$f")" ] && [ ! -h "$(dirname "$f")" ] && find "$f" -maxdepth 0 -type f -exec basename '{}' \; | grep "$1" | cut -d'.' -f-1 >> "$TEMP"
	elif [ "$2" = "DEEP" ]; then	
		# Deep search (specified by -d or --deep; more thorough, but
		# also slower and more likely to pick up spurious results,
		# including non-libraries.)
		[ -d "$(dirname "$f")" ] && [ ! -h "$(dirname "$f")" ] && find "$f" -type f -exec basename '{}' \; | grep "$1" | cut -d'.' -f-1 >> "$TEMP"
	fi
done
sort "$TEMP" | uniq > "$TEMP".new
echo
echo '	'Matches with any of the following libraries will be displayed:
echo
cat "$TEMP".new
echo

while read -r lib; do
	unset ECHOHERE
	for PKG in "$PKGLIBS"/*
	do
		if [ -f "$PKG/libs" ]; then
			x=$(grep -m 1 "$lib" "$PKG"/libs)
			PKG="$(basename "$PKG")"
			[ -n "$x" ] && echo '	'"$lib" may have been installed by the $(tput smul)"$PKG"$(tput rmul) package. && ECHOHERE=yes
		fi
	done
[ "$ECHOHERE" = yes ] && echo
done < "$TEMP".new

# Determining the correct number of cut backslashes
DEPSNUM="$(echo "$PKGDEPS" | tr -cd '/' | wc -c)"
BINSNUM="$(echo "$BINDEPS" | tr -cd '/' | wc -c)"
# Adjusting
DEPSNUM=$((DEPSNUM + 2))
BINSNUM=$((BINSNUM + 2))
echo '	'The following $(tput smul)packages$(tput rmul) use one of these libraries:
echo
grep "$1" "$PKGDEPS"/*/* | cut -d'/' -f"$DEPSNUM"- | cut -d'/' -f-1 | uniq
echo
echo '	'The following $(tput smul)programs$(tput rmul) use one of these libraries:
echo
grep "$1" "$BINDEPS"/*/* | cut -d'/' -f"$BINSNUM"- | cut -d'/' -f-1 | uniq
echo
echo '	'If closer matches are needed, consider using $(tput smul)libprecise$(tput rmul) with one of these libraries:
echo
cat "$TEMP".new
echo
rm -f "$TEMP" "$TEMP".new
[ -f "$TEMP.yal" ] && mv "$TEMP".yal "$TEMP"
}

unset DEEP
unset LIB

for arg in "$@"; do
	case "$arg" in
		-h|--help)
	        echo
		echo $(tput smul)libcheck$(tput rmul): Check for details about dynamic libraries matching
		echo a search term.
	        echo
	        echo Syntax: libcheck SEARCHTERM
	        echo
	        echo Flag:
	        echo "  -h | --help : Display this help menu."
       		echo
		exit
		;;
		-d|--deep)
		DEEP=DEEP
		;;
		*)
		LIB="$arg"
		main "$LIB" "$DEEP"
	esac
done
